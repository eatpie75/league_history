# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.db import models, migrations
import datetime
from django.utils.timezone import utc


class Migration(migrations.Migration):

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Game',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('region', models.IntegerField(default=0, choices=[(0, b'NA'), (1, b'EUW'), (2, b'EUNE'), (3, b'BR')])),
                ('game_id', models.IntegerField()),
                ('game_map', models.IntegerField(db_index=True, choices=[(0, b'Old Twisted Treeline'), (1, b'Summoners Rift'), (2, b'Dominion'), (3, b'Howling Abyss'), (4, b'Twisted Treeline'), (9, b'?')])),
                ('game_mode', models.IntegerField(db_index=True, choices=[(0, b'Custom'), (1, b'Bot'), (2, b'Normal'), (3, b'Solo'), (4, b'Premade'), (5, b'Team'), (6, b'Aram'), (7, b'One For All'), (8, b'Showdown'), (9, b'Hexakill'), (10, b'URF'), (11, b'Nightmare Bot'), (12, b'Ascension'), (99, b'?')])),
                ('time', models.DateTimeField(db_index=True)),
                ('blue_team_won', models.BooleanField()),
                ('invalid', models.BooleanField(default=False)),
                ('unfetched_players', models.CharField(max_length=256, blank=True)),
                ('fetched', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ['-time'],
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Player',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('won', models.BooleanField()),
                ('tier', models.IntegerField(blank=True, null=True, choices=[(1, b'BRONZE'), (2, b'SILVER'), (3, b'GOLD'), (4, b'PLATINUM'), (5, b'DIAMOND'), (6, b'CHALLENGER')])),
                ('division', models.IntegerField(blank=True, null=True, choices=[(1, b'I'), (2, b'II'), (3, b'III'), (4, b'IV'), (5, b'V')])),
                ('rank', models.IntegerField(null=True, blank=True)),
                ('afk', models.BooleanField()),
                ('leaver', models.BooleanField()),
                ('blue_team', models.BooleanField()),
                ('ping', models.IntegerField()),
                ('queue_length', models.IntegerField()),
                ('premade_size', models.IntegerField()),
                ('experience_earned', models.IntegerField()),
                ('boosted_experience_earned', models.IntegerField()),
                ('ip_earned', models.IntegerField()),
                ('boosted_ip_earned', models.IntegerField()),
                ('summoner_level', models.IntegerField()),
                ('summoner_spell1', models.IntegerField()),
                ('summoner_spell2', models.IntegerField()),
                ('champion_id', models.IntegerField()),
                ('skin_index', models.IntegerField()),
                ('skin_name', models.CharField(max_length=64, null=True, blank=True)),
                ('champion_level', models.IntegerField()),
                ('items', models.CharField(max_length=43)),
                ('kills', models.IntegerField()),
                ('deaths', models.IntegerField()),
                ('assists', models.IntegerField()),
                ('minion_kills', models.IntegerField()),
                ('neutral_minions_killed', models.IntegerField()),
                ('neutral_minions_killed_your_jungle', models.IntegerField()),
                ('neutral_minions_killed_enemy_jungle', models.IntegerField()),
                ('gold', models.IntegerField()),
                ('physical_damage_dealt', models.IntegerField()),
                ('magic_damage_dealt', models.IntegerField()),
                ('true_damage_dealt', models.IntegerField()),
                ('damage_dealt', models.IntegerField()),
                ('physical_damage_taken', models.IntegerField()),
                ('magic_damage_taken', models.IntegerField()),
                ('true_damage_taken', models.IntegerField()),
                ('damage_taken', models.IntegerField()),
                ('total_time_crowd_control_dealt', models.IntegerField()),
                ('total_healing_done', models.IntegerField()),
                ('time_spent_dead', models.IntegerField()),
                ('largest_multikill', models.IntegerField()),
                ('largest_killing_spree', models.IntegerField()),
                ('largest_critical_strike', models.IntegerField()),
                ('turrets_destroyed', models.IntegerField()),
                ('inhibitors_destroyed', models.IntegerField()),
                ('sight_wards_bought_in_game', models.IntegerField()),
                ('vision_wards_bought_in_game', models.IntegerField()),
                ('ward_placed', models.IntegerField()),
                ('ward_killed', models.IntegerField()),
                ('node_neutralize', models.IntegerField(null=True, blank=True)),
                ('node_neutralize_assist', models.IntegerField(null=True, blank=True)),
                ('node_capture', models.IntegerField(null=True, blank=True)),
                ('node_capture_assist', models.IntegerField(null=True, blank=True)),
                ('victory_point_total', models.IntegerField(null=True, blank=True)),
                ('team_objective', models.IntegerField(null=True, blank=True)),
                ('total_player_score', models.IntegerField(null=True, blank=True)),
                ('objective_player_score', models.IntegerField(null=True, blank=True)),
                ('combat_player_score', models.IntegerField(null=True, blank=True)),
                ('total_score_rank', models.IntegerField(null=True, blank=True)),
                ('game', models.ForeignKey(to='lol.Game')),
            ],
            options={
                'ordering': ['game'],
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Summoner',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('region', models.IntegerField(default=0, choices=[(0, b'NA'), (1, b'EUW'), (2, b'EUNE'), (3, b'BR')])),
                ('account_id', models.IntegerField(db_index=True)),
                ('summoner_id', models.IntegerField()),
                ('name', models.CharField(max_length=64)),
                ('internal_name', models.CharField(max_length=64)),
                ('level', models.IntegerField()),
                ('profile_icon', models.IntegerField()),
                ('runes', models.TextField(default=b'{}', blank=True)),
                ('masteries', models.TextField(default=b'{}', blank=True)),
                ('update_automatically', models.BooleanField(default=False, db_index=True)),
                ('fully_update', models.BooleanField(default=False)),
                ('time_created', models.DateTimeField(auto_now_add=True)),
                ('time_updated', models.DateTimeField(default=datetime.datetime(2014, 10, 24, 2, 26, 0, 354000, tzinfo=utc))),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='SummonerRankedStatistics',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('season', models.IntegerField()),
                ('champion_id', models.IntegerField()),
                ('wins', models.IntegerField()),
                ('losses', models.IntegerField()),
                ('kills', models.IntegerField()),
                ('deaths', models.IntegerField()),
                ('assists', models.IntegerField()),
                ('minion_kills', models.IntegerField()),
                ('gold', models.IntegerField()),
                ('turrets_destroyed', models.IntegerField()),
                ('damage_dealt', models.IntegerField()),
                ('physical_damage_dealt', models.IntegerField()),
                ('magical_damage_dealt', models.IntegerField()),
                ('damage_taken', models.IntegerField()),
                ('double_kills', models.IntegerField()),
                ('triple_kills', models.IntegerField()),
                ('quadra_kills', models.IntegerField()),
                ('penta_kills', models.IntegerField()),
                ('time_spent_dead', models.IntegerField()),
                ('maximum_kills', models.IntegerField()),
                ('maximum_deaths', models.IntegerField()),
                ('summoner', models.ForeignKey(to='lol.Summoner')),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='SummonerRating',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('game_map', models.IntegerField(db_index=True, choices=[(0, b'Old Twisted Treeline'), (1, b'Summoners Rift'), (2, b'Dominion'), (3, b'Howling Abyss'), (4, b'Twisted Treeline'), (9, b'?')])),
                ('game_mode', models.IntegerField(db_index=True, choices=[(0, b'Custom'), (1, b'Bot'), (2, b'Normal'), (3, b'Solo'), (4, b'Premade'), (5, b'Team'), (6, b'Aram'), (7, b'One For All'), (8, b'Showdown'), (9, b'Hexakill'), (10, b'URF'), (11, b'Nightmare Bot'), (12, b'Ascension'), (99, b'?')])),
                ('wins', models.IntegerField()),
                ('losses', models.IntegerField()),
                ('league', models.CharField(max_length=127, null=True, blank=True)),
                ('tier', models.IntegerField(blank=True, null=True, choices=[(1, b'BRONZE'), (2, b'SILVER'), (3, b'GOLD'), (4, b'PLATINUM'), (5, b'DIAMOND'), (6, b'CHALLENGER')])),
                ('division', models.IntegerField(blank=True, null=True, choices=[(1, b'I'), (2, b'II'), (3, b'III'), (4, b'IV'), (5, b'V')])),
                ('rank', models.IntegerField(null=True, blank=True)),
                ('miniseries_target', models.IntegerField(default=0)),
                ('miniseries_wins', models.IntegerField(default=0)),
                ('miniseries_losses', models.IntegerField(default=0)),
                ('summoner', models.ForeignKey(to='lol.Summoner')),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.AlterUniqueTogether(
            name='summonerrating',
            unique_together=set([('summoner', 'game_map', 'game_mode')]),
        ),
        migrations.AlterIndexTogether(
            name='summonerrating',
            index_together=set([('summoner', 'game_map', 'game_mode')]),
        ),
        migrations.AlterUniqueTogether(
            name='summoner',
            unique_together=set([('region', 'account_id')]),
        ),
        migrations.AlterIndexTogether(
            name='summoner',
            index_together=set([('region', 'account_id')]),
        ),
        migrations.AddField(
            model_name='player',
            name='summoner',
            field=models.ForeignKey(to='lol.Summoner'),
            preserve_default=True,
        ),
        migrations.AlterUniqueTogether(
            name='player',
            unique_together=set([('game', 'summoner')]),
        ),
        migrations.AlterUniqueTogether(
            name='game',
            unique_together=set([('region', 'game_id')]),
        ),
        migrations.AlterIndexTogether(
            name='game',
            index_together=set([('game_id', 'region'), ('game_map', 'game_mode')]),
        ),
    ]
