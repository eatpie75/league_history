// Generated by CoffeeScript 1.8.0
(function() {
  var draw_chart, tier_colors, tier_goals;

  tier_goals = {
    1: [100, 200, 300, 400],
    2: [500, 600, 700, 800, 900],
    3: [1000, 1100, 1200, 1300, 1400],
    4: [1500, 1600, 1700, 1800, 1900],
    5: [2000, 2100, 2200, 2300, 2400],
    6: [2500, 2551]
  };

  tier_colors = {
    1: ['#866500', '#866500', '#866500', '#866500'],
    2: ['#9a9a9a', '#9a9a9a', '#9a9a9a', '#9a9a9a', '#9a9a9a'],
    3: ['#ffca2a', '#ffca2a', '#ffca2a', '#ffca2a', '#ffca2a'],
    4: ['#52a2ab', '#52a2ab', '#52a2ab', '#52a2ab', '#52a2ab'],
    5: ['#00c068', '#00c068', '#00c068', '#00c068', '#00c068'],
    6: ['#c30b0b', '#c30b0b']
  };

  draw_chart = function(data, kwargs) {
    var append_colors, append_goals, champion, chart_defaults, chart_options, colors, data_defaults, data_options, day, goals, high, high_rank, high_tier, low, low_rank, low_tier, parsed, prefix_colors, prefix_goals, x, _chistorywr_hover, _i, _j, _k, _l, _lcs_hover, _lcs_num_reverser, _len, _len1, _len2, _len3, _len4, _m, _n;
    if (kwargs == null) {
      kwargs = {};
    }
    _chistorywr_hover = function(index, options) {
      return "<b>" + options.data[index]['x'] + "</b><br>" + options.data[index]['y'] + "% Winrate<br>Played " + options.data[index]['count'] + " times";
    };
    _lcs_num_reverser = function(lcs) {
      var division, rank, tier;
      tier = Math.floor(lcs / 500) + 1;
      division = Math.floor((lcs - (tier - 1) * 500) / 100);
      rank = 100 - Math.floor(lcs - (tier - 1) * 500 - division * 100);
      if (tier === 6) {
        division = 4;
        rank -= 50;
      }
      return {
        'tier': tier,
        'division': 5 - division,
        'rank': rank
      };
    };
    _lcs_hover = function(index, options) {
      data = options.data[index];
      return JSON.stringify(_lcs_num_reverser(data['y']));
    };
    chart_defaults = {
      type: 'Line',
      element: 'elo-graph',
      xkey: 'x',
      ykeys: 'y',
      labels: ['ELO'],
      ymax: 'auto',
      ymin: 'auto',
      hideHover: true,
      lineColors: ['#3269b4', '#C0D800', '#CB4B4B', '#4DA74D', '#9440ED']
    };
    data_defaults = {
      y: 'rating',
      data_parse: 'default',
      graph_begin_date: new Date('2010-01-01')
    };
    chart_options = $.extend(true, {}, chart_defaults, kwargs.chart_options);
    data_options = $.extend(true, {}, data_defaults, kwargs.data_options);
    parsed = [];
    if (chart_options.type === 'Line' && data_options.data_parse === 'default') {
      for (_i = 0, _len = data.length; _i < _len; _i++) {
        day = data[_i];
        if (day[1][data_options.y] < 10) {
          continue;
        }
        parsed.push({
          'x': day[0],
          'y': day[1][data_options.y]
        });
      }
    } else if (chart_options.type === 'Line' && data_options.data_parse === 'chistorywr') {
      chart_options.hoverCallback = _chistorywr_hover;
      for (_j = 0, _len1 = data.length; _j < _len1; _j++) {
        day = data[_j];
        if (day[1]['champions'][data_options.y]['count'] < 20) {
          continue;
        }
        parsed.push({
          'x': day[0],
          'y': Math.round((day[1]['champions'][data_options.y]['won'] / day[1]['champions'][data_options.y]['count']) * 100),
          'count': day[1]['champions'][data_options.y]['count']
        });
      }
    } else if (chart_options.type === 'Line' && data_options.data_parse === 'chistorypop') {
      for (_k = 0, _len2 = data.length; _k < _len2; _k++) {
        day = data[_k];
        if (day[1]['champions'][data_options.y]['count'] < 10) {
          continue;
        }
        parsed.push({
          'x': day[0],
          'y': (day[1]['champions'][data_options.y]['won'] / day[1]['count']) * 100
        });
      }
    } else if (chart_options.type === 'Line' && data_options.data_parse === 'lcs' && data.length > 2) {
      chart_options.hoverCallback = _lcs_hover;
      chart_options.yLabelFormat = function(x) {
        return '';
      };
      chart_options.grid = false;
      low = 2600;
      high = 0;
      for (_l = 0, _len3 = data.length; _l < _len3; _l++) {
        day = data[_l];
        if (day[1]['avg'] > high) {
          high = day[1]['avg'];
        }
        if (day[1]['avg'] < low) {
          low = day[1]['avg'];
        }
        parsed.push({
          'x': day[0],
          'y': day[1]['avg']
        });
      }
      low_rank = _lcs_num_reverser(low);
      high_rank = _lcs_num_reverser(high);
      low_tier = low_rank['tier'];
      high_tier = high_rank['tier'];
      goals = [];
      colors = [];
      prefix_goals = [];
      append_goals = [];
      prefix_colors = [];
      append_colors = [];
      for (x = _m = low_tier; low_tier <= high_tier ? _m <= high_tier : _m >= high_tier; x = low_tier <= high_tier ? ++_m : --_m) {
        goals = goals.concat(tier_goals[x]);
        colors = colors.concat(tier_colors[x]);
      }
      if (low_tier === high_tier) {
        if (low_tier !== 1) {
          prefix_goals = prefix_goals.concat(tier_goals[low_tier - 1].slice(-1));
          prefix_colors = prefix_colors.concat(tier_colors[low_tier - 1].slice(-1));
        }
        if (low_tier !== 6) {
          append_goals = append_goals.concat(tier_goals[low_tier + 1][0]);
          append_colors = append_colors.concat(tier_colors[low_tier + 1][0]);
        }
      } else {
        if (high_tier !== 6) {
          append_goals = append_goals.concat(tier_goals[high_tier + 1][0]);
          append_colors = append_colors.concat(tier_colors[high_tier + 1][0]);
        }
      }
      chart_options.goals = [].concat(prefix_goals, goals, append_goals);
      chart_options.goalLineColors = [].concat(prefix_colors, colors, append_colors);
      chart_options.goalStrokeWidth = 2;
    } else if (chart_options.type === 'Donut' && data_options.data_parse === 'default') {
      chart_options.colors = ['#D676E5', '#B15CBF', '#8D4299', '#692873', '#450F4E', '#88ACDE', '#6B8CBA', '#4F6D97', '#324E73', '#162F50'];
      for (_n = 0, _len4 = data.length; _n < _len4; _n++) {
        champion = data[_n];
        parsed.push({
          'label': "" + window.STATIC_URL + "img/champions/" + champion['champion_id'] + ".png",
          'value': champion[data_options.y],
          'blue_team': champion.blue_team
        });
      }
      parsed.sort(function(a, b) {
        if (a.blue_team && !b.blue_team) {
          return 1;
        } else if (!a.blue_team && b.blue_team) {
          return -1;
        } else if (a.value > b.value) {
          return 1;
        } else if (a.value < b.value) {
          return -1;
        } else {
          return 0;
        }
      });
    }
    chart_options['data'] = parsed;
    window.drawn_chart = Morris[chart_options['type']](chart_options);
    return [data_options, chart_options];
  };

  $(document).ready(function() {
    var i_chart, _i, _len, _ref, _results;
    window.draw_chart = draw_chart;
    if (window.chart != null) {
      if (Array.isArray(window.chart)) {
        _ref = window.chart;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          i_chart = _ref[_i];
          _results.push(draw_chart(window.chart_data, i_chart));
        }
        return _results;
      } else {
        return draw_chart(window.chart_data, window.chart);
      }
    }
  });

}).call(this);
