// Generated by CoffeeScript 1.3.3
(function() {
  var ChampionSort, PlayerGamePageHandler, StatFilter, draw_bgchart, force_update, querystring;

  PlayerGamePageHandler = (function() {

    function PlayerGamePageHandler() {
      this.page = 1;
      this.account_id = window.account_id;
      this.region = window.region;
      this._bind();
    }

    PlayerGamePageHandler.prototype._bind = function() {
      var _this_;
      _this_ = this;
      $('.page_link').bind('click', function(e) {
        return _this_.change_page($(this));
      });
      return window.connect_items();
    };

    PlayerGamePageHandler.prototype.change_page = function(el) {
      var page,
        _this = this;
      if (el == null) {
        el = 1;
      }
      if (typeof el === 'object') {
        page = el.data('page');
      } else {
        page = el;
      }
      return $.ajax({
        type: 'GET',
        url: "" + window.AJAX_BASE + "ajax/summoner_games/" + this.region + "/" + this.account_id + "/?page=" + page,
        dataType: "html",
        success: function(msg) {
          $('#games').html(msg);
          return _this._bind();
        }
      });
    };

    return PlayerGamePageHandler;

  })();

  ChampionSort = (function() {

    function ChampionSort() {
      var qs;
      this.column = $('.table-sort.active:first');
      if (this.column.length > 0) {
        this.column_str = this.column.data('column');
        this.direction = 1;
        this.icon = this.column.children('span').children('i');
        this._icons = {
          '-1': 'icon-arrow-up',
          '1': 'icon-arrow-down'
        };
        this._bind();
        qs = querystring(window.location.hash.slice(1));
        if ('sort' in qs) {
          if ('direction' in qs) {
            this.direction = Number(qs.direction);
          }
          this.change($('.table-sort').filter(function(e) {
            return $(this).data('column') === qs['sort'];
          }).first(), true);
        }
      }
    }

    ChampionSort.prototype._bind = function() {
      var _this_;
      _this_ = this;
      return $('.table-sort').bind('click', function(e) {
        return _this_.change($(this));
      });
    };

    ChampionSort.prototype.change = function(el, init) {
      var qs;
      if (init == null) {
        init = false;
      }
      if (init) {
        this.icon.removeClass(this._icons["" + 1]);
      }
      if (this.column_str === el.data('column')) {
        this.icon.removeClass(this._icons["" + this.direction]).addClass(this._icons["" + (this.direction * -1)]);
        this.direction *= -1;
      } else {
        this.column.removeClass('active');
        this.icon.removeClass(this._icons["" + this.direction]);
        if (init === false) {
          this.direction = 1;
        }
        this.column = el;
        this.column_str = this.column.data('column');
        this.icon = this.column.children('span').children('i');
        this.column.addClass('active');
        this.icon.addClass(this._icons["" + this.direction]);
      }
      this.sort(el.data('column'));
      qs = querystring(window.location.hash.slice(1));
      qs['sort'] = el.data('column');
      if (this.direction === -1) {
        qs['direction'] = this.direction;
      } else {
        delete qs.direction;
      }
      return window.location.hash = $.param(qs);
    };

    ChampionSort.prototype.sort = function(column) {
      var _sort,
        _this = this;
      _sort = function(a, b) {
        var c, d, pregex, _ref, _ref1;
        pregex = new RegExp('(\\d+)%', 'i');
        c = $(a).children("." + column).text();
        d = $(b).children("." + column).text();
        if (!isNaN(Number(c)) && !isNaN(Number(d))) {
          _ref = [Number(c), Number(d)], c = _ref[0], d = _ref[1];
          if (c > d) {
            return -1 * _this.direction;
          } else if (c === d) {
            return 0;
          } else {
            return 1 * _this.direction;
          }
        } else if (pregex.test(c) && pregex.test(d)) {
          _ref1 = [Number(c.match(pregex)[1]), Number(d.match(pregex)[1])], c = _ref1[0], d = _ref1[1];
          if (c > d) {
            return -1 * _this.direction;
          } else if (c === d) {
            return 0;
          } else {
            return 1 * _this.direction;
          }
        } else {
          if (c > d) {
            return 1 * _this.direction;
          } else if (c === d) {
            return 0;
          } else {
            return -1 * _this.direction;
          }
        }
      };
      $('.cbody').append($('.cbody .sort').sort(_sort));
      return this.current_column = column;
    };

    return ChampionSort;

  })();

  StatFilter = (function() {

    function StatFilter() {
      this._bind();
    }

    StatFilter.prototype._bind = function() {
      var _this_;
      _this_ = this;
      return $('#stat-filter').bind('change', function() {
        var el, params;
        el = $(this);
        params = {};
        if (el.children('#id_game_map').val() !== '-1') {
          params.game_map = el.children('#id_game_map').val();
        }
        if (el.children('#id_game_mode').val() !== '-1') {
          params.game_mode = el.children('#id_game_mode').val();
        }
        return window.location.search = $.param(params);
      });
    };

    return StatFilter;

  })();

  querystring = function(oqs) {
    var obj, option, qs, _i, _len;
    oqs = oqs.split('&');
    qs = {};
    for (_i = 0, _len = oqs.length; _i < _len; _i++) {
      option = oqs[_i];
      obj = option.split('=');
      if (obj[0] === '' && obj.length === 1) {
        break;
      }
      qs[decodeURI(obj[0])] = decodeURI(obj[1]);
    }
    return qs;
  };

  force_update = function(e) {
    var _update_status,
      _this = this;
    _update_status = function() {
      var _this = this;
      return $.ajax({
        type: 'GET',
        url: "" + window.AJAX_BASE + "ajax/force_update_status/" + window.region + "/" + window.account_id + "/",
        dataType: "json",
        success: function(msg) {
          if (msg.status === 'QUEUE') {
            return setTimeout(_update_status, msg.delay);
          } else if (msg.status === 'DONE') {
            return $('#last-updated').text(msg.msg);
          }
        }
      });
    };
    $('#last-updated-block').html("<small id='last-updated'>WORKING...</small>");
    return $.ajax({
      type: 'GET',
      url: "" + window.AJAX_BASE + "ajax/force_update/" + window.region + "/" + window.account_id + "/",
      dataType: "json",
      success: function(msg) {
        $('#last-updated').text("LAST UPDATED:" + msg.msg);
        if (msg.status === 'QUEUE') {
          return setTimeout(_update_status, msg.delay);
        }
      }
    });
  };

  draw_bgchart = function(data, y) {
    var container, day, parsed, _i, _len;
    if (y == null) {
      y = 'rating';
    }
    container = document.getElementById("elo-graph");
    parsed = [];
    for (_i = 0, _len = data.length; _i < _len; _i++) {
      day = data[_i];
      if (day[1][y] < 10) {
        continue;
      }
      parsed.push([new Date(day[0]), day[1][y]]);
    }
    return Flotr.draw(container, [parsed], {
      xaxis: {
        mode: 'time',
        showLabels: false
      },
      yaxis: {
        autoscale: true,
        autoscaleMargin: 1,
        showLabels: false
      },
      mouse: {
        track: true,
        trackFormatter: function(obj) {
          return "" + (Flotr.Date.format(obj.x, '%y-%m-%d')) + ": " + (Math.round(obj.y));
        },
        sensiblility: 3,
        lineColor: '#fff',
        relative: true
      },
      lines: {
        fill: true,
        show: true
      },
      points: {
        show: true,
        lineWidth: 1,
        radius: 2,
        fillColor: '#00A8F0'
      },
      grid: {
        color: '#fff',
        verticalLines: false,
        horizontalLines: false,
        outline: ''
      }
    });
  };

  $(document).ready(function() {
    window.page_handler = new PlayerGamePageHandler();
    window.champion_sort = new ChampionSort();
    window.stat_filter = new StatFilter();
    $('#force-update').bind('click', force_update);
    if (window.bgchart != null) {
      draw_bgchart(window.data, window.bgchart);
    }
    return $('a[data-toggle="tab"]').click(function(e) {
      e.preventDefault();
      return $(this).tab('show');
    });
  });

}).call(this);
