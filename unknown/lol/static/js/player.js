// Generated by CoffeeScript 1.3.3
(function() {
  var ChampionSort, PlayerGamePageHandler, StatFilter;

  PlayerGamePageHandler = (function() {

    function PlayerGamePageHandler() {
      this.page = 1;
      this.summoner = window.account_id;
      this._bind();
    }

    PlayerGamePageHandler.prototype._bind = function() {
      var _this_;
      _this_ = this;
      return $('.page_link').bind('click', function(e) {
        return _this_.change_page($(this));
      });
    };

    PlayerGamePageHandler.prototype.change_page = function(el) {
      var page,
        _this = this;
      if (el == null) {
        el = 1;
      }
      if (typeof el === 'object') {
        page = el.data('page');
      } else {
        page = el;
      }
      return $.ajax({
        type: 'GET',
        url: "/ajax/summoner_games/" + this.summoner + "/?page=" + page,
        dataType: "html",
        success: function(msg) {
          $('#games').html(msg);
          return _this._bind();
        }
      });
    };

    return PlayerGamePageHandler;

  })();

  ChampionSort = (function() {

    function ChampionSort() {
      this.direction = 1;
      this.column = $('.table-sort.active:first');
      this.column_str = this.column.data('column');
      this.icon = this.column.children('span').children('i');
      this._icons = {
        '-1': 'icon-arrow-up',
        '1': 'icon-arrow-down'
      };
      this._bind();
    }

    ChampionSort.prototype._bind = function() {
      var _this_;
      _this_ = this;
      return $('.table-sort').bind('click', function(e) {
        var el;
        el = $(this);
        if (_this_.column_str === el.data('column')) {
          _this_.icon.removeClass(_this_._icons["" + _this_.direction]).addClass(_this_._icons["" + (_this_.direction * -1)]);
          _this_.direction *= -1;
        } else {
          _this_.column.removeClass('active');
          _this_.icon.removeClass(_this_._icons["" + _this_.direction]);
          _this_.direction = 1;
          _this_.column = el;
          _this_.column_str = _this_.column.data('column');
          _this_.icon = _this_.column.children('span').children('i');
          _this_.column.addClass('active');
          _this_.icon.addClass(_this_._icons["" + _this_.direction]);
        }
        return _this_.sort(el.data('column'));
      });
    };

    ChampionSort.prototype.sort = function(column) {
      var _sort,
        _this = this;
      _sort = function(a, b) {
        var c, d, pregex, _ref, _ref1;
        pregex = new RegExp('(\\d+)%', 'i');
        c = $(a).children("." + column).text();
        d = $(b).children("." + column).text();
        if (!isNaN(Number(c)) && !isNaN(Number(d))) {
          _ref = [Number(c), Number(d)], c = _ref[0], d = _ref[1];
          if (c > d) {
            return -1 * _this.direction;
          } else if (c === d) {
            return 0;
          } else {
            return 1 * _this.direction;
          }
        } else if (pregex.test(c) && pregex.test(d)) {
          _ref1 = [Number(c.match(pregex)[1]), Number(d.match(pregex)[1])], c = _ref1[0], d = _ref1[1];
          if (c > d) {
            return -1 * _this.direction;
          } else if (c === d) {
            return 0;
          } else {
            return 1 * _this.direction;
          }
        } else {
          if (c > d) {
            return 1 * _this.direction;
          } else if (c === d) {
            return 0;
          } else {
            return -1 * _this.direction;
          }
        }
      };
      $('.cbody').append($('.cbody .sort').sort(_sort));
      return this.current_column = column;
    };

    return ChampionSort;

  })();

  StatFilter = (function() {

    function StatFilter() {
      this._bind();
    }

    StatFilter.prototype._bind = function() {
      var _this_;
      _this_ = this;
      return $('#stat-filter').bind('change', function() {
        return $('#stat-filter').submit();
      });
    };

    return StatFilter;

  })();

  $(document).ready(function() {
    window.page_handler = new PlayerGamePageHandler();
    window.champion_sort = new ChampionSort();
    return window.stat_filter = new StatFilter();
  });

}).call(this);
