// Generated by CoffeeScript 1.3.2
(function() {
  var RequestHandler, buffer, client, colors, ev, events, http, json, lol_client, options, qs, url, util, views, zlib, _log,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  buffer = require('buffer').Buffer;

  colors = require('colors');

  events = require('events');

  http = require('http');

  json = require('JSON2').stringify;

  qs = require('querystring');

  url = require('url');

  util = require('util');

  zlib = require('zlib');

  lol_client = require('./lol-client');

  views = require('./views');

  ev = new events.EventEmitter();

  _log = function(text) {
    var d, time;
    d = new Date();
    time = ("" + (d.getFullYear()) + "/" + (d.getMonth() + 1) + "/" + (d.getDate()) + " " + (d.getHours()) + ":" + (d.getMinutes())).white;
    time = (time + '                          ').slice(0, 26);
    return console.log(time + " | " + text);
  };

  RequestHandler = (function() {

    function RequestHandler(views, local_client) {
      this.send = __bind(this.send, this);

      this.respond = __bind(this.respond, this);

      this.request = __bind(this.request, this);
      this.views = views;
      this.client = local_client;
      ev.on('finished', this.respond).on('send', this.send);
    }

    RequestHandler.prototype.request = function(request, response) {
      var path, view, _ref;
      path = url.parse(request.url);
      if (_ref = path.pathname, __indexOf.call(Object.keys(this.views), _ref) >= 0) {
        view = new this.views[path.pathname](path.query, this.client, ev, request, response);
        view.go();
        view = null;
      } else {
        _log(("" + path.pathname).cyan + " >> Status:" + "404".red);
        response.writeHead(404);
        response.write('404');
        response.end();
      }
      return false;
    };

    RequestHandler.prototype.respond = function(data, request, response) {
      var body, obj;
      body = json(data.body);
      obj = {
        'status': data.status,
        'body': body,
        'headers': {
          'Content-Type': 'application/json'
        },
        'path': url.parse(request.url).pathname
      };
      if (request.headers['accept-encoding'].toLowerCase().indexOf('gzip') !== -1) {
        obj['headers']['Content-Encoding'] = 'gzip';
        return zlib.gzip(obj['body'], function(e, r) {
          return ev.emit('send', response, obj, {
            'body': r
          });
        });
      } else {
        return ev.emit('send', response, obj);
      }
    };

    RequestHandler.prototype.send = function(response, data, args) {
      var content_length, k, v;
      if (args != null) {
        for (k in args) {
          v = args[k];
          data[k] = v;
        }
      }
      content_length = new buffer(data['body']).length;
      data['headers']['Content-Length'] = content_length;
      response.writeHead(data.status, data.headers);
      response.write(data.body);
      response.end();
      return _log(("" + data.path).cyan + " >> Status:" + ("" + data.status).green + " >> Length:" + ("" + content_length).magenta);
    };

    return RequestHandler;

  })();

  options = {
    region: 'na',
    username: 'dotaesnumerouno',
    password: 'penis2',
    version: '1.59.12_04_30_11_00'
  };

  _log("Preparing to connect".grey);

  client = new lol_client(options);

  client.on('connection', function() {
    var h, server;
    _log("Connected".green);
    h = new RequestHandler(views, client);
    server = http.createServer(h.request);
    server.listen(8081);
    return setInterval(function() {
      return client.keepAlive(function(err, result) {
        return _log("Heartbeat".magenta);
      });
    }, 360000);
  });

  client.connect();

}).call(this);
