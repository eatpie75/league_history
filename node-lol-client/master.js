// Generated by CoffeeScript 1.3.3
(function() {
  var RequestHandler, bind_events, buffer, child_process, clients, colors, ev, events, h, http, json, server, servers, tmp, url, zlib, _i, _len, _log,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  buffer = require('buffer').Buffer;

  child_process = require('child_process');

  colors = require('colors');

  events = require('events');

  http = require('http');

  json = require('JSON2').stringify;

  url = require('url');

  zlib = require('zlib');

  ev = events.EventEmitter;

  _log = function(msg) {
    var blank, d, info, time;
    blank = '                                                 ';
    d = new Date();
    time = (" " + (d.getFullYear()) + "/" + (d.getMonth() + 1) + "/" + (d.getDate()) + " " + (d.getHours()) + ":" + (d.getMinutes() < 10 ? '0' + d.getMinutes() : d.getMinutes()) + ":" + (d.getSeconds() < 10 ? '0' + d.getSeconds() : d.getSeconds())).white;
    info = (msg.server + time + blank).slice(0, 49);
    return console.log(info + " | " + msg.text);
  };

  RequestHandler = (function(_super) {

    __extends(RequestHandler, _super);

    function RequestHandler(local_clients) {
      this.send = __bind(this.send, this);

      this.respond = __bind(this.respond, this);

      this.request = __bind(this.request, this);
      this.clients = local_clients;
      this.on('finished', this.respond).on('send', this.send);
    }

    RequestHandler.prototype.request = function(request, response) {
      var client, data, path, _add_data, _i, _len, _ref, _this;
      _this = this;
      path = url.parse(request.url);
      if (path.pathname === '/status/') {
        data = [];
        _add_data = function(msg) {
          if (msg.event === 'status') {
            data.push({
              server: msg.server,
              data: msg.data
            });
          }
          if (data.length === _this.clients.length) {
            _this.emit('finished', {
              status: 200,
              body: data
            }, request, response);
          }
          return this.removeListener('message', _add_data);
        };
        _ref = this.clients;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          client = _ref[_i];
          client.on('message', _add_data);
          client.send({
            event: 'status'
          });
        }
      } else {
        response.writeHead(404);
        response.write('404');
        response.end();
      }
      return false;
    };

    RequestHandler.prototype.respond = function(data, request, response) {
      var body, obj, _this;
      _this = this;
      body = json(data.body);
      obj = {
        'status': data.status,
        'body': body,
        'headers': {
          'Content-Type': 'application/json; charset=UTF-8'
        },
        'path': url.parse(request.url).pathname
      };
      if (request.headers['accept-encoding'].toLowerCase().indexOf('gzip') !== -1) {
        obj['headers']['Content-Encoding'] = 'gzip';
        return zlib.gzip(obj['body'], function(e, r) {
          return _this.emit('send', response, obj, {
            'body': r
          });
        });
      } else {
        return this.emit('send', response, obj);
      }
    };

    RequestHandler.prototype.send = function(response, data, args) {
      var content_length, k, v;
      if (args != null) {
        for (k in args) {
          v = args[k];
          data[k] = v;
        }
      }
      content_length = new buffer(data['body']).length;
      data['headers']['Content-Length'] = content_length;
      response.writeHead(data.status, data.headers);
      response.write(data.body);
      return response.end();
    };

    return RequestHandler;

  })(ev);

  bind_events = function(server) {
    return server.on('exit', function(code, signal) {
      return console.log(code, signal);
    }).on('message', function(msg) {
      if (msg.event === 'log') {
        return _log(msg);
      }
    });
  };

  servers = [
    {
      username: 'dotaesnumerouno',
      password: 'penis2',
      region: 'na',
      listen_port: 8081,
      version: '1.60.12_05_22_19_12'
    }, {
      username: 'thosebananas',
      password: 'penis2',
      region: 'na',
      listen_port: 8082,
      version: '1.60.12_05_22_19_12'
    }, {
      username: 'dotaesnumerouno',
      password: 'penis2',
      region: 'euw',
      listen_port: 8083,
      version: '1.60.12_05_22_19_12'
    }
  ];

  clients = [];

  for (_i = 0, _len = servers.length; _i < _len; _i++) {
    server = servers[_i];
    tmp = child_process.fork('learn.js');
    tmp.send({
      event: 'connect',
      options: server
    });
    bind_events(tmp);
    clients.push(tmp);
  }

  h = new RequestHandler(clients);

  server = http.createServer(h.request);

  server.listen(8080, 'localhost');

}).call(this);
