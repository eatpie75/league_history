// Generated by CoffeeScript 1.3.3
(function() {
  var GetNames, GetSpectatorInfo, GetSummonerData, MassUpdate, RecentGames, Search, colors, events, has_key, models, qs, sleep, util, uuid, views, _log,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  colors = require('colors');

  events = require('events');

  qs = require('querystring');

  util = require('util');

  uuid = require('node-uuid');

  models = require('./lib/models');

  _log = function(text) {
    return process.send({
      event: 'log',
      server: "" + options.region + ":" + options.username,
      text: text
    });
  };

  has_key = function(obj, key) {
    return obj.hasOwnProperty(key);
  };

  sleep = function(ms) {
    var d, startTime;
    d = startTime = new Date().getTime();
    while (d < startTime + ms) {
      d = new Date().getTime();
    }
    return true;
  };

  GetNames = (function() {

    function GetNames(query, client, cb, request, response) {
      this.client = client;
      this.cb = cb;
      this.request = request;
      this.response = response;
      this.get = __bind(this.get, this);

      this.go = __bind(this.go, this);

      this.uuid = uuid.v4();
      this.summoners = qs.parse(query)['ids'].split(',').map(Number);
    }

    GetNames.prototype.go = function() {
      this.client.on('message', this.get);
      return this.client.send({
        event: 'get',
        model: 'PlayerNames',
        query: {
          summoners: this.summoners
        },
        uuid: this.uuid
      });
    };

    GetNames.prototype.get = function(msg) {
      var data;
      if (msg.event === ("" + this.uuid + "__finished")) {
        data = {
          status: 200,
          body: msg.data
        };
        this.cb(data, this.request, this.response);
        return this.client.removeListener('message', this.get);
      }
    };

    return GetNames;

  })();

  MassUpdate = (function() {

    function MassUpdate(query, client, cb, request, response) {
      var account, name;
      this.client = client;
      this.cb = cb;
      this.request = request;
      this.response = response;
      this.throttled = __bind(this.throttled, this);

      this._next = __bind(this._next, this);

      this.get = __bind(this.get, this);

      this.go = __bind(this.go, this);

      this.uuid = [uuid.v4(), uuid.v4(), uuid.v4()];
      this.query = qs.parse(query);
      this.data = {
        status: 200,
        body: {
          errors: [],
          accounts: {}
        }
      };
      this.running_queries = 0;
      this.queue = [];
      if (this.query['accounts'] != null) {
        this.queue = this.queue.concat((function() {
          var _i, _len, _ref, _results;
          _ref = this.query['accounts'].split(',');
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            account = _ref[_i];
            _results.push({
              account_id: account
            });
          }
          return _results;
        }).call(this));
      }
      if (this.query['names'] != null) {
        this.queue = this.queue.concat((function() {
          var _i, _len, _ref, _results;
          _ref = this.query['names'].split(',');
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            name = _ref[_i];
            _results.push({
              'name': name
            });
          }
          return _results;
        }).call(this));
      }
      if (this.query['games'] != null) {
        this.games = 1;
      } else {
        this.games = 0;
      }
      this.client.on('message', this.get);
    }

    MassUpdate.prototype.go = function() {
      return this._next();
    };

    MassUpdate.prototype.get = function(msg) {
      var summoner, _ref;
      if (msg.event === ("" + this.uuid[0] + "__finished")) {
        summoner = msg.data;
        if (!has_key(this.data.body.accounts, summoner.account_id)) {
          this.data.body.accounts[summoner.account_id] = {};
        }
        this.data.body.accounts[summoner.account_id].profile = summoner;
        this.client.send({
          event: 'get',
          model: 'PlayerStats',
          query: {
            account_id: summoner.account_id
          },
          uuid: this.uuid[1]
        });
        if (this.games) {
          this.running_queries += 1;
          return this.client.send({
            event: 'get',
            model: 'RecentGames',
            query: {
              account_id: summoner.account_id
            },
            uuid: this.uuid[2]
          });
        }
      } else if (msg.event === ("" + this.uuid[1] + "__finished")) {
        this.data.body.accounts[msg.extra.account_id].stats = msg.data;
        this.running_queries -= 1;
        return this._next();
      } else if (msg.event === ("" + this.uuid[2] + "__finished")) {
        this.running_queries -= 1;
        this.data.body.accounts[msg.extra.account_id].games = msg.data;
        return this._next();
      } else if ((_ref = msg.event) === 'throttled' || _ref === 'timeout') {
        return this.throttled();
      } else {
        return console.log(msg);
      }
    };

    MassUpdate.prototype._next = function() {
      var key;
      if (this.running_queries < 3 && this.queue.length > 0) {
        this.running_queries += 1;
        key = this.queue.shift();
        console.log(key);
        try {
          return this.client.send({
            event: 'get',
            model: 'Summoner',
            query: key,
            uuid: this.uuid[0]
          });
        } catch (error) {
          console.log(error);
          return console.log('oh god');
        }
      } else if (this.running_queries === 0 && this.queue.length === 0) {
        this.cb(this.data, this.request, this.response);
        return this.client.removeListener('message', this.get);
      }
    };

    MassUpdate.prototype.throttled = function() {
      this.client.removeListener('message', this.get);
      this.queue = [];
      this.response.writeHead(500);
      return this.response.end();
    };

    return MassUpdate;

  })();

  RecentGames = (function() {

    function RecentGames(query, client, cb, request, response) {
      this.client = client;
      this.cb = cb;
      this.request = request;
      this.response = response;
      this.go = __bind(this.go, this);

      this.query = qs.parse(query);
      this.account = Number(this.query['account']);
      this.data = {};
    }

    RecentGames.prototype.go = function() {
      var games,
        _this = this;
      _log('Fetching games'.yellow);
      games = new models.RecentGames({
        client: this.client
      });
      games.on('finished', function(result) {
        _this.data = {
          status: 200,
          body: result
        };
        return _this.cb(_this.data, _this.request, _this.response);
      });
      games.get(this.account);
      return false;
    };

    return RecentGames;

  })();

  GetSummonerData = (function() {

    function GetSummonerData(query, client, cb, request, response) {
      this.client = client;
      this.cb = cb;
      this.request = request;
      this.response = response;
      this.go = __bind(this.go, this);

      this.query = qs.parse(query);
      if (this.query['account'] != null) {
        this.key = {
          account_id: Number(this.query['account'])
        };
      } else if (this.query['name'] != null) {
        this.key = {
          name: this.query['name']
        };
      }
      if (this.query['runes'] != null) {
        this.runes = 1;
      } else {
        this.runes = 0;
      }
      this.data = {};
    }

    GetSummonerData.prototype.go = function() {
      var summoner_data,
        _this = this;
      summoner_data = new models.Summoner({
        client: this.client
      });
      summoner_data.on('finished', function(result) {
        _this.data = {
          status: 200,
          body: result
        };
        if (_this.runes) {
          _this.data.body['runes'] = new models.RunePage(summoner_data.org.object.spellBook.object).parse();
        }
        return _this.cb(_this.data, _this.request, _this.response);
      });
      return summoner_data.get(this.key);
    };

    return GetSummonerData;

  })();

  Search = (function() {

    function Search(query, client, cb, request, response) {
      this.client = client;
      this.cb = cb;
      this.request = request;
      this.response = response;
      this.get = __bind(this.get, this);

      this.go = __bind(this.go, this);

      this.uuid = uuid.v4();
      this.name = qs.parse(query)['name'];
    }

    Search.prototype.go = function() {
      this.client.on('message', this.get);
      return this.client.send({
        event: 'get',
        model: 'Search',
        query: {
          name: this.name
        },
        uuid: this.uuid
      });
    };

    Search.prototype.get = function(msg) {
      var data;
      if (msg.event === ("" + this.uuid + "__finished")) {
        data = {
          status: 200,
          body: msg.data
        };
        this.cb(data, this.request, this.response);
        return this.client.removeListener('message', this.get);
      }
    };

    return Search;

  })();

  GetSpectatorInfo = (function() {

    function GetSpectatorInfo(query, client, cb, request, response) {
      this.client = client;
      this.cb = cb;
      this.request = request;
      this.response = response;
      this.get = __bind(this.get, this);

      this.go = __bind(this.go, this);

      this.uuid = uuid.v4();
      this.query = qs.parse(query);
      this.name = this.query['name'];
      if (this.query['link'] != null) {
        this.link = true;
      } else {
        this.link = false;
      }
    }

    GetSpectatorInfo.prototype.go = function() {
      this.client.on('message', this.get);
      return this.client.send({
        event: 'get',
        model: 'SpectatorInfo',
        query: {
          name: this.name
        },
        uuid: this.uuid
      });
    };

    GetSpectatorInfo.prototype.get = function(msg) {
      var data, errors;
      errors = {
        'OB-1': 'No game',
        'OB-2': 'Game not observable',
        'OB-3': 'Game not started yet'
      };
      if (msg.event === ("" + this.uuid + "__finished")) {
        data = {
          status: 200
        };
        if (msg.data.error != null) {
          data.body = errors[msg.data.error];
        } else {
          if (this.link) {
            data.body = "<a href='lolspectate://ip=" + msg.data.ip + "&port=" + msg.data.port + "&game_id=" + msg.data.game_id + "&region=" + msg.data.region + "&key=" + msg.data.key + "'>" + this.name + "</a>";
            data.html = true;
          } else {
            data.body = msg.data;
          }
        }
        this.cb(data, this.request, this.response);
        return this.client.removeListener('message', this.get);
      }
    };

    return GetSpectatorInfo;

  })();

  views = {
    '/get_names/': GetNames,
    '/mass_update/': MassUpdate,
    '/search/': Search,
    '/spectate/': GetSpectatorInfo
  };

  module.exports = views;

}).call(this);
