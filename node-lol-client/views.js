// Generated by CoffeeScript 1.3.2
(function() {
  var GetNames, GetSummonerData, MassUpdate, RecentGames, colors, events, has_key, lol_client, models, qs, views, _log,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  colors = require('colors');

  events = require('events');

  qs = require('querystring');

  lol_client = require('./lol-client');

  models = require('./lib/models');

  _log = function(text) {
    var d, time;
    d = new Date();
    time = ("" + (d.getFullYear()) + "/" + (d.getMonth() + 1) + "/" + (d.getDate()) + " " + (d.getHours()) + ":" + (d.getMinutes())).white;
    time = (time + '                          ').slice(0, 26);
    return console.log(time + " | " + text);
  };

  has_key = function(obj, key) {
    return obj.hasOwnProperty(key);
  };

  GetNames = (function() {

    function GetNames(query, local_client, ev, request, response) {
      this.go = __bind(this.go, this);
      this.client = local_client;
      this.ev = ev;
      this.request = request;
      this.response = response;
      this.summoners = qs.parse(query)['ids'].split(',').map(Number);
    }

    GetNames.prototype.go = function() {
      var names,
        _this = this;
      names = new models.PlayerNames({
        client: this.client
      });
      names.on('finished', function(result) {
        var data;
        data = {
          status: 200,
          body: result
        };
        return _this.ev.emit('finished', data, _this.request, _this.response);
      });
      names.get(this.summoners);
      return false;
    };

    return GetNames;

  })();

  MassUpdate = (function() {

    function MassUpdate(query, local_client, ev, request, response) {
      this._next = __bind(this._next, this);

      this.go = __bind(this.go, this);

      var account, name;
      this.client = local_client;
      this.ev = ev;
      this.request = request;
      this.response = response;
      this.query = qs.parse(query);
      this.data = {
        status: 200,
        body: {
          errors: [],
          accounts: {}
        }
      };
      this.running_queries = 0;
      this.queue = [];
      if (this.query['accounts'] != null) {
        this.queue = this.queue.concat((function() {
          var _i, _len, _ref, _results;
          _ref = this.query['accounts'].split(',');
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            account = _ref[_i];
            _results.push({
              account_id: account
            });
          }
          return _results;
        }).call(this));
      }
      if (this.query['names'] != null) {
        this.queue = this.queue.concat((function() {
          var _i, _len, _ref, _results;
          _ref = this.query['names'].split(',');
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            name = _ref[_i];
            _results.push({
              'name': name
            });
          }
          return _results;
        }).call(this));
      }
      if (this.query['games'] != null) {
        this.games = 1;
      } else {
        this.games = 0;
      }
      this.ev.on('next', this._next);
    }

    MassUpdate.prototype.go = function() {
      return this.ev.emit('next');
    };

    MassUpdate.prototype._next = function() {
      var key, playerstats, summoner,
        _this = this;
      if (this.running_queries < 5 && this.queue.length > 0) {
        this.running_queries += 1;
        key = this.queue.shift();
        summoner = new models.Summoner({
          client: this.client
        });
        playerstats = new models.PlayerStats({
          client: this.client
        });
        summoner.on('finished', function(result) {
          var games;
          if (!has_key(_this.data.body.accounts, summoner.account_id)) {
            _this.data.body.accounts[summoner.account_id] = {};
          }
          _this.data.body.accounts[summoner.account_id].profile = result;
          playerstats.get(summoner.account_id);
          if (_this.games) {
            games = new models.RecentGames({
              client: _this.client
            });
            _this.running_queries += 1;
            games.on('finished', function(result) {
              _this.data.body.accounts[games.account_id].games = result;
              _this.running_queries -= 1;
              return _this.ev.emit('next');
            });
            return games.get(summoner.account_id);
          }
        });
        playerstats.on('finished', function(result) {
          _this.data.body.accounts[summoner.account_id].stats = result;
          _this.running_queries -= 1;
          return _this.ev.emit('next');
        });
        return summoner.get(key);
      } else if (this.running_queries === 0 && this.queue.length === 0) {
        this.ev.emit('finished', this.data, this.request, this.response);
        return this.ev.removeAllListeners('fetched').removeAllListeners('next');
      }
    };

    return MassUpdate;

  })();

  RecentGames = (function() {

    function RecentGames(query, local_client, ev, request, response) {
      this.go = __bind(this.go, this);
      this.client = local_client;
      this.ev = ev;
      this.request = request;
      this.response = response;
      this.query = qs.parse(query);
      this.account = Number(this.query['account']);
      this.data = {};
    }

    RecentGames.prototype.go = function() {
      var games,
        _this = this;
      _log('Fetching games'.yellow);
      games = new models.RecentGames({
        client: this.client
      });
      games.on('finished', function(result) {
        var data;
        data = {
          status: 200,
          body: result
        };
        return _this.ev.emit('finished', data, _this.request, _this.response);
      });
      games.get(this.account);
      return false;
    };

    return RecentGames;

  })();

  GetSummonerData = (function() {

    function GetSummonerData(query, local_client, ev, request, response) {
      this.go = __bind(this.go, this);
      this.client = local_client;
      this.ev = ev;
      this.request = request;
      this.response = response;
      this.query = qs.parse(query);
      if (this.query['account'] != null) {
        this.key = {
          account_id: Number(this.query['account'])
        };
      } else if (this.query['name'] != null) {
        this.key = {
          name: this.query['name']
        };
      }
      if (this.query['runes'] != null) {
        this.runes = 1;
      } else {
        this.runes = 0;
      }
      this.data = {};
    }

    GetSummonerData.prototype.go = function() {
      var summoner_data,
        _this = this;
      summoner_data = new models.Summoner({
        client: this.client
      });
      summoner_data.on('finished', function(result) {
        _this.data = {
          status: 200,
          body: result
        };
        if (_this.runes) {
          _this.data.body['runes'] = new models.RunePage(summoner_data.org.object.spellBook.object).parse();
        }
        return _this.ev.emit('finished', _this.data, _this.request, _this.response);
      });
      return summoner_data.get(this.key);
    };

    return GetSummonerData;

  })();

  views = {
    '/get_names/': GetNames,
    '/mass_update/': MassUpdate,
    '/recent_games/': RecentGames,
    '/get_data/': GetSummonerData
  };

  module.exports = views;

}).call(this);
