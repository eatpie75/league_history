// Generated by CoffeeScript 1.3.3
(function() {
  var PlayerNames, PlayerStats, RecentGames, RunePage, Search, SpectatorInfo, Summoner, ev, has_key, json,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  ev = require('events').EventEmitter;

  json = JSON.stringify;

  has_key = function(obj, key) {
    return obj.hasOwnProperty(key);
  };

  PlayerNames = (function(_super) {

    __extends(PlayerNames, _super);

    function PlayerNames(options) {
      this.get = __bind(this.get, this);

      this.parse = __bind(this.parse, this);
      if (options != null) {
        if (options.hasOwnProperty('client')) {
          this.client = options.client;
        }
        if (options.hasOwnProperty('summoners')) {
          this.summoners = summoners;
        }
      }
      this.data = [];
    }

    PlayerNames.prototype.parse = function() {};

    PlayerNames.prototype.get = function(args) {
      var _this = this;
      this.summoners = args.summoners;
      return this.client.getSummonerName(this.summoners, function(err, result) {
        var data;
        if (err != null) {
          data = err;
        } else {
          data = result.data;
        }
        return _this.emit('finished', data);
      });
    };

    return PlayerNames;

  })(ev);

  PlayerStats = (function(_super) {

    __extends(PlayerStats, _super);

    function PlayerStats(options) {
      this.toJSON = __bind(this.toJSON, this);

      this.get = __bind(this.get, this);

      this.parse = __bind(this.parse, this);
      if (options != null) {
        if (options.hasOwnProperty('client')) {
          this.client = options.client;
        }
        if (options.hasOwnProperty('stats')) {
          this.org = options.stats;
          this.account_id = this.org.userId.value;
        }
      }
      this.data = [];
    }

    PlayerStats.prototype.parse = function() {
      var current, game_type, stat, stats, _i, _j, _len, _len1, _ref, _ref1;
      this.data = [];
      _ref = this.org.playerStatSummaries.object.playerStatSummarySet.data;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        game_type = _ref[_i];
        stats = game_type.object;
        current = {
          'game_type': stats.playerStatSummaryTypeString,
          'rating': stats.rating,
          'rating_max': stats.maxRating,
          'wins': stats.wins,
          'losses': stats.losses,
          'leaves': stats.leaves,
          'aggregated_stats': {}
        };
        _ref1 = stats.aggregatedStats.object.stats.data;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          stat = _ref1[_j];
          current['aggregated_stats'][stat.object.statType.toLowerCase()] = stat.object.value.value;
        }
        this.data.push(current);
      }
      return this.data;
    };

    PlayerStats.prototype.get = function(args) {
      var account_id,
        _this = this;
      account_id = args.account_id;
      return this.client.getSummonerStats(account_id, function(err, result) {
        var data;
        if (err != null) {
          data = err;
        } else {
          _this.org = result.object;
          _this.account_id = _this.org.userId.value;
          _this.parse();
        }
        return _this.emit('finished', _this.data, {
          account_id: _this.account_id
        });
      });
    };

    PlayerStats.prototype.toJSON = function() {
      return json(this.data);
    };

    return PlayerStats;

  })(ev);

  RecentGames = (function(_super) {

    __extends(RecentGames, _super);

    function RecentGames(options) {
      this.toJSON = __bind(this.toJSON, this);

      this.get = __bind(this.get, this);

      this.parse = __bind(this.parse, this);
      if (options.hasOwnProperty('client')) {
        this.client = options.client;
      }
      if (options.hasOwnProperty('games')) {
        this.org = games;
        this.account_id = this.org.userId.value;
      }
      this.data = [];
    }

    RecentGames.prototype.parse = function() {
      var current, game, key, ogame, player, stat, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
      this.data = [];
      _ref = this.org.gameStatistics.data;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        ogame = _ref[_i];
        game = ogame.object;
        current = {
          'id': game.gameId.value,
          'game_map': game.gameMapId,
          'game_mode': game.gameMode,
          'game_type': game.gameType,
          'team': game.teamId.value === 100 ? 'blue' : 'purple',
          'afk': game.afk,
          'leaver': game.leaver,
          'ip_earned': game.ipEarned.value,
          'xp_earned': game.experienceEarned.value,
          'boost_ip': game.boostIpEarned.value,
          'boost_xp': game.boostXpEarned.value,
          'champion': game.championId.value,
          'date': game.createDate,
          'players': (function() {
            var _j, _len1, _ref1, _results;
            _ref1 = game.fellowPlayers.data;
            _results = [];
            for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
              player = _ref1[_j];
              _results.push(player.object.summonerId.value);
            }
            return _results;
          })(),
          'summoner_level': game.level.value,
          'premade_size': game.premadeSize,
          'premade_team': game.premadeTeam,
          'skin_index': game.skinIndex,
          'skin_name': game.skinName,
          'summoner_spell_one': game.spell1.value,
          'summoner_spell_two': game.spell2.value,
          'queue_length': game.timeInQueue,
          'queue_type': game.queueType,
          'ping': game.userServerPing,
          'stats': {}
        };
        _ref1 = game.statistics.data;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          stat = _ref1[_j];
          current['stats'][stat.object.statType.toLowerCase()] = stat.object.value.value;
        }
        _ref2 = ['num_deaths', 'champions_killed', 'assists', 'largest_critical_strike', 'largest_killing_spree', 'largest_multi_kill', 'item0', 'item1', 'item2', 'item3', 'item4', 'item5', 'minions_killed', 'gold_earned', 'physical_damage_dealt_player', 'magic_damage_dealt_player', 'physical_damage_taken', 'magic_damage_taken', 'total_heal', 'total_time_spent_dead', 'neutral_minions_killed', 'turrets_killed', 'inhibitors_destroyed', 'lose', 'win'];
        for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
          key = _ref2[_k];
          if (!has_key(current.stats, key)) {
            current.stats[key] = 0;
          }
        }
        current.stats.damage_taken = current.stats.physical_damage_taken + current.stats.magic_damage_taken;
        current.stats.damage_dealt = current.stats.physical_damage_dealt_player + current.stats.magic_damage_dealt_player;
        this.data.push(current);
        this.data.sort(function(a, b) {
          if (a.id > b.id) {
            return -1;
          } else if (a.id < b.id) {
            return 1;
          } else {
            return 0;
          }
        });
      }
      return this.data;
    };

    RecentGames.prototype.get = function(args) {
      var account_id,
        _this = this;
      account_id = args.account_id;
      return this.client.getMatchHistory(account_id, function(err, result) {
        var data;
        if (err != null) {
          console.log('Error'.red + err);
          data = err;
        } else {
          _this.org = result.object;
          _this.account_id = _this.org.userId.value;
          _this.parse();
        }
        return _this.emit('finished', _this.data, {
          account_id: _this.account_id
        });
      });
    };

    RecentGames.prototype.toJSON = function() {
      return json(this.data);
    };

    return RecentGames;

  })(ev);

  Summoner = (function(_super) {

    __extends(Summoner, _super);

    function Summoner(options) {
      this.toJSON = __bind(this.toJSON, this);

      this.get = __bind(this.get, this);

      this.parse = __bind(this.parse, this);
      if (options != null) {
        if (options.hasOwnProperty('client')) {
          this.client = options.client;
        }
        if (options.hasOwnProperty('summoner')) {
          this.summoner = options.summoner;
          this.account_id = this.summoner.acctId.value;
        }
      }
      this.data = {};
    }

    Summoner.prototype.parse = function() {
      var current;
      this.data = {};
      current = {
        'account_id': this.summoner.acctId.value,
        'summoner_id': this.summoner.sumId.value,
        'internal_name': this.summoner.internalName,
        'name': this.summoner.name,
        'level': this.org.object.summonerLevelAndPoints.object.summonerLevel.value,
        'profile_icon': this.summoner.profileIconId,
        'season_one_tier': this.summoner.seasonOneTier
      };
      this.data = current;
      return this.data;
    };

    Summoner.prototype.get = function(args) {
      var _this = this;
      this.on('found_account_id', function() {
        return _this.client.getSummonerData(_this.account_id, function(err, result) {
          if (err != null) {
            _this.data = err;
          } else {
            _this.org = result;
            _this.summoner = result.object.summoner.object;
            _this.account_id = _this.summoner.acctId.value;
            _this.parse();
          }
          return _this.emit('finished', _this.data);
        });
      });
      if (has_key(args, 'account_id')) {
        this.account_id = args.account_id;
        return this.emit('found_account_id');
      } else if (has_key(args, 'name')) {
        return this.client.getSummonerByName(args.name, function(err, result) {
          if (err != null) {
            _this.data = err;
            return _this.emit('finished', _this.data);
          } else {
            _this.account_id = result.object.acctId.value;
            return _this.emit('found_account_id');
          }
        });
      }
    };

    Summoner.prototype.toJSON = function() {
      return json(this.data);
    };

    return Summoner;

  })(ev);

  Search = (function(_super) {

    __extends(Search, _super);

    function Search(options) {
      this.toJSON = __bind(this.toJSON, this);

      this.get = __bind(this.get, this);

      this.parse = __bind(this.parse, this);
      if (options != null) {
        if (has_key(options, 'client')) {
          this.client = options.client;
        }
        if (has_key(options, 'search')) {
          this.search = options.search;
          this.account_id = this.search.account_id;
        }
      }
      this.data = {};
    }

    Search.prototype.parse = function() {
      var current;
      console.log(this.search);
      this.data = {};
      current = {
        'account_id': this.search.acctId.value,
        'summoner_id': this.search.summonerId.value,
        'internal_name': this.search.internalName,
        'name': this.search.name,
        'level': this.search.summonerLevel.value,
        'profile_icon': this.search.profileIconId,
        'region': this.client.options.region
      };
      this.data = current;
      return this.data;
    };

    Search.prototype.get = function(args) {
      var name,
        _this = this;
      name = args.name;
      return this.client.getSummonerByName(name, function(err, result) {
        if (err != null) {
          _this.data = err;
          _this.emit('finished', _this.data);
        } else if (err === null && result === null) {
          _this.data = {};
        } else {
          _this.account_id = result.object.acctId.value;
          _this.search = result.object;
          _this.parse();
        }
        return _this.emit('finished', _this.data);
      });
    };

    Search.prototype.toJSON = function() {
      return json(this.data);
    };

    return Search;

  })(ev);

  RunePage = (function() {

    function RunePage(runepage, client) {
      this.toJSON = __bind(this.toJSON, this);

      this.parse = __bind(this.parse, this);
      if (client != null) {
        this.client = client;
      }
      this.runepage = runepage;
      this.data = [];
    }

    RunePage.prototype.parse = function() {
      var current, opage, orune, page, rune, tmp, _i, _j, _len, _len1, _ref, _ref1;
      this.data = [];
      _ref = this.runepage.bookPages.data;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        opage = _ref[_i];
        page = opage.object;
        current = {
          'id': page.pageId.value,
          'name': page.name,
          'created': page.createDate,
          'slots': []
        };
        _ref1 = page.slotEntries.data;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          orune = _ref1[_j];
          rune = orune.object;
          tmp = {
            'slot': rune.runeSlotId,
            'id': rune.runeId
          };
          current['slots'].push(tmp);
        }
        this.data.push(current);
      }
      return this.data;
    };

    RunePage.prototype.toJSON = function() {
      return json(this.data);
    };

    return RunePage;

  })();

  SpectatorInfo = (function(_super) {

    __extends(SpectatorInfo, _super);

    function SpectatorInfo(options) {
      this.toJSON = __bind(this.toJSON, this);

      this.get = __bind(this.get, this);

      this.parse = __bind(this.parse, this);
      if (options != null) {
        if (has_key(options, 'client')) {
          this.client = options.client;
        }
        if (has_key(options, 'info')) {
          this.info = options.info;
        }
      }
      this.data = {};
    }

    SpectatorInfo.prototype.parse = function() {
      var current, regions;
      this.data = {};
      regions = {
        'na': 'NA1',
        'euw': 'EUW1',
        'eune': 'EUN1'
      };
      current = {
        'key': this.info.playerCredentials.object.observerEncryptionKey,
        'ip': this.info.playerCredentials.object.observerServerIp,
        'port': this.info.playerCredentials.object.observerServerPort,
        'game_id': this.info.playerCredentials.object.gameId.value,
        'region': regions[this.client.options.region]
      };
      this.data = current;
      return this.data;
    };

    SpectatorInfo.prototype.get = function(args) {
      var name,
        _this = this;
      name = args.name;
      return this.client.getSpectatorInfo(name, function(err, result) {
        if (err != null) {
          _this.data = {
            'error': err
          };
          _this.emit('finished', _this.data);
        } else {
          _this.info = result.object;
          _this.parse();
        }
        return _this.emit('finished', _this.data);
      });
    };

    SpectatorInfo.prototype.toJSON = function() {
      return json(this.data);
    };

    return SpectatorInfo;

  })(ev);

  exports.PlayerNames = PlayerNames;

  exports.PlayerStats = PlayerStats;

  exports.RecentGames = RecentGames;

  exports.Summoner = Summoner;

  exports.RunePage = RunePage;

  exports.Search = Search;

  exports.SpectatorInfo = SpectatorInfo;

  exports.get = {
    'PlayerNames': exports.PlayerNames,
    'PlayerStats': exports.PlayerStats,
    'RecentGames': exports.RecentGames,
    'Summoner': exports.Summoner,
    'RunePage': exports.RunePage,
    'Search': exports.Search,
    'SpectatorInfo': exports.SpectatorInfo
  };

}).call(this);
