// Generated by CoffeeScript 1.3.3
(function() {
  var has_key, models, util, uuid;

  util = require('util');

  uuid = require('node-uuid');

  models = require('../lib/models');

  has_key = function(obj, key) {
    return obj.hasOwnProperty(key);
  };

  module.exports = function(req, res) {
    var account, client, data, games, masteries, name, queue, rid, runes, running_queries, throttled, _get, _next;
    client = req.lolclient;
    rid = [uuid.v4(), uuid.v4(), uuid.v4(), uuid.v4()];
    data = {
      status: 200,
      body: {
        errors: [],
        accounts: {}
      },
      requests: 0
    };
    running_queries = 0;
    queue = [];
    if (req.query['accounts'] != null) {
      queue = queue.concat((function() {
        var _i, _len, _ref, _results;
        _ref = req.query['accounts'].split(',');
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          account = _ref[_i];
          _results.push({
            'account_id': account
          });
        }
        return _results;
      })());
    }
    if (req.query['names'] != null) {
      queue = queue.concat((function() {
        var _i, _len, _ref, _results;
        _ref = req.query['names'].split(',');
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          name = _ref[_i];
          _results.push({
            'name': name
          });
        }
        return _results;
      })());
    }
    if (req.query['games'] != null) {
      games = 1;
    } else {
      games = 0;
    }
    if (req.query['runes'] != null) {
      runes = true;
    } else {
      runes = false;
    }
    if (req.query['masteries'] != null) {
      masteries = true;
    } else {
      masteries = false;
    }
    _get = function(msg) {
      var summoner, _ref;
      if (msg.event === ("" + rid[0] + "__finished")) {
        summoner = msg.data;
        data.requests += msg.extra.requests;
        if (!has_key(data.body.accounts, summoner.account_id)) {
          data.body.accounts[summoner.account_id] = {};
        }
        data.body.accounts[summoner.account_id].profile = summoner;
        if (runes) {
          data.body.accounts[summoner.account_id].runes = msg.extra.runes;
        }
        client.send({
          'event': 'get',
          'model': 'PlayerStats',
          'query': {
            'account_id': summoner.account_id
          },
          'uuid': rid[1]
        });
        if (games) {
          running_queries += 1;
          client.send({
            'event': 'get',
            'model': 'RecentGames',
            'query': {
              'account_id': summoner.account_id
            },
            'uuid': rid[2]
          });
        }
        if (masteries) {
          running_queries += 1;
          return client.send({
            'event': 'get',
            'model': 'MasteryBook',
            'query': {
              'summoner_id': summoner.summoner_id,
              'account_id': summoner.account_id
            },
            'uuid': rid[3]
          });
        }
      } else if (msg.event === ("" + rid[1] + "__finished")) {
        data.requests += msg.extra.requests;
        data.body.accounts[msg.extra.account_id].stats = msg.data;
        running_queries -= 1;
        if (!masteries) {
          return _next();
        }
      } else if (msg.event === ("" + rid[2] + "__finished")) {
        data.requests += msg.extra.requests;
        running_queries -= 1;
        data.body.accounts[msg.extra.account_id].games = msg.data;
        if (!masteries) {
          return _next();
        }
      } else if (msg.event === ("" + rid[3] + "__finished")) {
        data.requests += msg.extra.requests;
        running_queries -= 1;
        data.body.accounts[msg.extra.account_id].masteries = msg.data;
        return _next();
      } else if ((_ref = msg.event) === 'throttled' || _ref === 'timeout') {
        return throttled();
      } else {
        return console.log(msg);
      }
    };
    _next = function() {
      var extra, key;
      if (running_queries < 3 && queue.length > 0) {
        running_queries += 1;
        key = queue.shift();
        console.log(key);
        extra = {
          'runes': runes,
          'masteries': masteries
        };
        try {
          return client.send({
            'event': 'get',
            'model': 'Summoner',
            'query': key,
            'uuid': rid[0],
            'extra': extra
          });
        } catch (error) {
          console.log(error);
          return console.log('oh god');
        }
      } else if (running_queries === 0 && queue.length === 0) {
        client.removeListener('message', _get);
        res.charset = 'utf8';
        res.contentType('json');
        return res.send(JSON.stringify(data.body));
      }
    };
    throttled = function() {
      client.removeListener('message', _get);
      queue = [];
      res.writeHead(500);
      return res.end();
    };
    client.on('message', _get);
    return _next();
  };

}).call(this);
