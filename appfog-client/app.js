// Generated by CoffeeScript 1.3.3
(function() {
  var af_app, app, bind_events, child_process, clients, colors, express, fs, http, instance, options, path, routes, server, servers, tmp, _log;

  child_process = require('child_process');

  colors = require('colors');

  express = require('express');

  fs = require('fs');

  http = require('http');

  path = require('path');

  routes = require('./routes');

  clients = [];

  fs.chmodSync("" + process.env.HOME + "/app/sockets/", 777);

  _log = function(msg) {
    var blank, d, info, time;
    blank = '                                                 ';
    d = new Date();
    time = (" " + (d.getFullYear()) + "/" + (d.getMonth() + 1) + "/" + (d.getDate()) + " " + (d.getHours()) + ":" + (d.getMinutes() < 10 ? '0' + d.getMinutes() : d.getMinutes()) + ":" + (d.getSeconds() < 10 ? '0' + d.getSeconds() : d.getSeconds())).white;
    info = (msg.server + time + blank).slice(0, 49);
    return console.log(info + " | " + msg.text);
  };

  bind_events = function(server) {
    return server.on('exit', function(code, signal) {
      return console.log(code, signal);
    }).on('message', function(msg) {
      if (msg.event === 'log') {
        return _log(msg);
      }
    });
  };

  af_app = JSON.parse(process.env.VCAP_APPLICATION);

  instance = af_app.instance_index;

  servers = require('./servers.json');

  for (server in servers) {
    options = servers[server];
    tmp = child_process.fork('bridge.js');
    tmp.send({
      'event': 'connect',
      'options': options,
      'id': server
    });
    bind_events(tmp);
    clients.push(tmp);
  }

  app = express();

  app.configure(function() {
    app.set('port', process.env.VCAP_APP_PORT || 3000);
    app.use(express.logger('dev'));
    app.use(express.bodyParser());
    app.use(express.methodOverride());
    app.use(express.compress());
    return app.use(app.router);
  });

  app.configure('development', function() {
    return app.use(express.errorHandler());
  });

  app.get('/', function(req, res) {
    return res.send(fs.readdirSync("" + process.env.HOME + "/app/"));
  });

  app.get(/\/(\d+)\/([\s\S]*)/, routes.index);

  console.log(app.settings.port);

  http.createServer(app).listen(app.settings.port);

}).call(this);
