// Generated by CoffeeScript 1.3.3
(function() {
  var http, https, performQueueRequest, u;

  u = require('underscore');

  http = require('http');

  https = require('https');

  performQueueRequest = function(host, username, password, cb) {
    var current, options, queue_node, queue_rate, target, user, _attempt_login, _check_queue, _get_ip, _get_token, _next_check, _ref, _request;
    _ref = [username, password, cb], username = _ref[0], password = _ref[1], cb = _ref[2];
    user = '';
    options = {
      'host': host,
      'port': 443,
      'method': 'POST'
    };
    current = 0;
    target = 0;
    queue_node = '';
    queue_rate = 0;
    _next_check = function() {
      var delay, diff, remaining;
      remaining = Math.round((target - current) / queue_rate);
      console.log("" + username + " in queue, postition:" + current + "/" + target + ", " + (Math.floor(remaining / 60)) + ":" + (Math.round(remaining % 60)) + " remaining");
      diff = target - current;
      if (diff < 100) {
        delay = 7000;
      } else if (diff < 1000) {
        delay = 10000;
      } else if (diff < 10000) {
        delay = 30000;
      } else {
        delay = 180000;
      }
      return setTimeout(_check_queue, delay);
    };
    _check_queue = function() {
      var args;
      args = {
        path: "/login-queue/rest/queue/ticker/" + this.queue_name
      };
      return _request(args, null, function(err, res) {
        var key;
        key = u.find(u.keys(res), function(tmp) {
          if (Number(tmp) === queue_node) {
            return true;
          } else {
            return false;
          }
        });
        current = parseInt("0x" + res[key]);
        if (current >= target) {
          return _get_token();
        } else {
          return _next_check();
        }
      });
    };
    _get_token = function() {
      var args;
      args = {
        path: "/login-queue/rest/queue/authToken/" + user
      };
      console.log("" + username + " getting token");
      return _request(args, null, function(err, res) {
        var _this = this;
        if (res.token != null) {
          return _get_ip(function(ip) {
            res.ip_address = ip;
            return cb(null, res);
          });
        } else {
          return _next_check();
        }
      });
    };
    _get_ip = function(tcb) {
      var args;
      args = {
        path: '/services/connection_info',
        host: 'll.leagueoflegends.com',
        port: 80
      };
      console.log("" + username + " getting ip");
      return _request(args, null, function(err, res) {
        return tcb(res.ip_address);
      });
    };
    _attempt_login = function() {
      var args, data;
      args = {
        path: '/login-queue/rest/queue/authenticate'
      };
      data = "payload=user%3D" + username + "%2Cpassword%3D" + password;
      return _request(args, data, function(err, res) {
        var queue_name, tmp,
          _this = this;
        if (res.status === 'LOGIN') {
          console.log("" + username + " got token");
          return cb(null, res);
        } else if (res.status === 'QUEUE') {
          user = res.user;
          queue_name = res.champ;
          queue_node = res.node;
          queue_rate = res.rate + 0.0;
          tmp = u.find(res.tickers, function(ticker) {
            if (ticker.node === queue_node) {
              return true;
            } else {
              return false;
            }
          });
          target = tmp.id;
          current = tmp.current;
          return _next_check();
        } else {
          return console.log(res);
        }
      });
    };
    _request = function(kwargs, payload, tcb) {
      var agent, req, req_options;
      req_options = u.clone(options);
      if (kwargs != null) {
        u.extend(req_options, kwargs);
      }
      if (!(payload != null)) {
        req_options.method = 'GET';
      }
      if (req_options.port === 443) {
        agent = https;
      } else {
        agent = http;
      }
      req = agent.request(req_options, function(res) {
        return res.on('data', function(d) {
          var data;
          data = JSON.parse(d.toString('utf-8'));
          return tcb(null, data);
        });
      });
      req.on('error', function(err) {
        console.log(err);
        req.abort();
        return process.exit(1);
      }).on('socket', function(socket) {
        socket.setTimeout(20000);
        return socket.on('timeout', function() {
          console.log('things are about to go poorly');
          req.abort();
          return process.exit(1);
        });
      });
      if (payload != null) {
        return req.end(payload);
      } else {
        return req.end();
      }
    };
    return _attempt_login();
  };

  module.exports = performQueueRequest;

}).call(this);
