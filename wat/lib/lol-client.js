// Generated by CoffeeScript 1.3.3
(function() {
  var EventEmitter, LolClient, RTMPClient, RTMPCommand, loginQueue, lolPackets, rtmp, tls,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  tls = require('tls');

  loginQueue = require('./login-queue');

  lolPackets = require('./packets');

  rtmp = require('namf/rtmp');

  RTMPClient = rtmp.RTMPClient;

  RTMPCommand = rtmp.RTMPCommand;

  EventEmitter = require('events').EventEmitter;

  LolClient = (function(_super) {

    __extends(LolClient, _super);

    LolClient.prototype._rtmpHosts = {
      'na': 'prod.na1.lol.riotgames.com',
      'euw': 'prod.eu.lol.riotgames.com',
      'eune': 'prod.eun1.lol.riotgames.com',
      'br': 'prod.br.lol.riotgames.com'
    };

    LolClient.prototype._loginQueueHosts = {
      'na': 'lq.na1.lol.riotgames.com',
      'euw': 'lq.eu.lol.riotgames.com',
      'eune': 'lq.eun1.lol.riotgames.com',
      'br': 'lq.br.lol.riotgames.com'
    };

    function LolClient(options) {
      this.options = options;
      this.keepAlive = __bind(this.keepAlive, this);

      this.getMasteryBook = __bind(this.getMasteryBook, this);

      this.getSpectatorInfo = __bind(this.getSpectatorInfo, this);

      this.getSummonerName = __bind(this.getSummonerName, this);

      this.getSummonerData = __bind(this.getSummonerData, this);

      this.getTeamById = __bind(this.getTeamById, this);

      this.getTeamsForSummoner = __bind(this.getTeamsForSummoner, this);

      this.getAggregatedStats = __bind(this.getAggregatedStats, this);

      this.getMatchHistory = __bind(this.getMatchHistory, this);

      this.getSummonerStats = __bind(this.getSummonerStats, this);

      this.getSummonerByName = __bind(this.getSummonerByName, this);

      this.performAuth = __bind(this.performAuth, this);

      this.performLogin = __bind(this.performLogin, this);

      if (this.options.region) {
        this.options.host = this._rtmpHosts[this.options.region];
        this.options.lqHost = this._loginQueueHosts[this.options.region];
      } else {
        this.options.host = this.options.host;
        this.options.lqHost = this.option.lqHost;
      }
      this.options.port = this.options.port || 2099;
      this.options.username = this.options.username;
      this.options.password = this.options.password;
      this.options.version = this.options.version || '1.55.12_02_27_22_54';
      this.options.debug = this.options.debug || false;
      this.keep_alive_counter = 0;
      if (this.options.debug) {
        console.log(this.options);
      }
    }

    LolClient.prototype.connect = function(cb) {
      var _this = this;
      return this.checkLoginQueue(function(err, token) {
        if (err) {
          console.log(err);
        }
        return _this.sslConnect(function(err, stream) {
          _this.stream = stream;
          return _this.setupRTMP();
        });
      });
    };

    LolClient.prototype.checkLoginQueue = function(cb) {
      var _this = this;
      if (this.options.debug) {
        console.log('Checking Login Queue');
      }
      return loginQueue(this.options.lqHost, this.options.username, this.options.password, function(err, response) {
        if (err) {
          if (_this.options.debug) {
            console.log('Login Queue Failed');
          }
          if (err && _this.options.debug) {
            console.log(err);
          }
          return cb(err);
        } else {
          if (!response.token) {
            return cb(new Error('Login Queue Response had no token'));
          } else {
            if (_this.options.debug) {
              console.log('Login Queue Response', response);
            }
            _this.options.queueToken = response.token;
            if (response.ip_address != null) {
              _this.options.queue_ip = response.ip_address;
            }
            return cb(null, _this.options.queueToken);
          }
        }
      });
    };

    LolClient.prototype.sslConnect = function(cb) {
      var stream, to,
        _this = this;
      if (this.options.debug) {
        console.log('Connecting to SSL');
      }
      to = {};
      stream = tls.connect(this.options.port, this.options.host, function() {
        clearTimeout(to);
        return cb(null, stream);
      });
      to = setTimeout(function() {
        console.log('ssl timeout');
        stream.destroySoon();
        return process.exit(1);
      }, 30000);
      return stream.on('error', function() {
        return stream.destroySoon();
      });
    };

    LolClient.prototype.setupRTMP = function() {
      var _this = this;
      if (this.options.debug) {
        console.log('Setting up RTMP Client');
      }
      this.rtmp = new RTMPClient(this.stream);
      if (this.options.debug) {
        console.log('Handshaking RTMP');
      }
      return this.rtmp.handshake(function(err) {
        if (err) {
          return _this.stream.destroy();
        } else {
          return _this.performNetConnect();
        }
      });
    };

    LolClient.prototype.performNetConnect = function() {
      var ConnectPacket, cmd, pkt,
        _this = this;
      if (this.options.debug) {
        console.log('Performing RTMP NetConnect');
      }
      ConnectPacket = lolPackets.ConnectPacket;
      pkt = new ConnectPacket(this.options);
      cmd = new RTMPCommand(0x14, 'connect', null, pkt.appObject(), [false, 'nil', '', pkt.commandObject()]);
      return this.rtmp.send(cmd, function(err, result) {
        if (err) {
          if (_this.options.debug) {
            console.log('NetConnect failed');
          }
          return _this.stream.destroy();
        } else {
          if (_this.options.debug) {
            console.log('NetConnect success');
          }
          return _this.performLogin(result);
        }
      });
    };

    LolClient.prototype.performLogin = function(result) {
      var LoginPacket, cmd,
        _this = this;
      if (this.options.debug) {
        console.log('Performing RTMP Login...');
      }
      LoginPacket = lolPackets.LoginPacket;
      this.options.dsid = result.args[0].id;
      cmd = new RTMPCommand(0x11, null, null, null, [new LoginPacket(this.options).generate(this.options.version)]);
      return this.rtmp.send(cmd, function(err, result) {
        if (err) {
          if (_this.options.debug) {
            console.log('RTMP Login failed');
          }
          return _this.stream.destroy();
        } else {
          return _this.performAuth(result);
        }
      });
    };

    LolClient.prototype.performAuth = function(result) {
      var AuthPacket, cmd,
        _this = this;
      if (this.options.debug) {
        console.log('Performing RTMP Auth..');
      }
      AuthPacket = lolPackets.AuthPacket;
      this.options.authToken = result.args[0].body.object.token;
      this.options.account_id = result.args[0].body.object.accountSummary.object.accountId.value;
      cmd = new RTMPCommand(0x11, null, null, null, [new AuthPacket(this.options).generate()]);
      return this.rtmp.send(cmd, function(err, result) {
        if (err) {
          if (_this.options.debug) {
            return console.log('RTMP Auth failed');
          }
        } else {
          if (_this.options.debug) {
            console.log('Connect Process Completed');
          }
          _this.emit('connection');
          return _this.rtmp.ev.on('throttled', function() {
            return _this.emit('throttled');
          });
        }
      });
    };

    LolClient.prototype.getSummonerByName = function(name, cb) {
      var LookupPacket, cmd,
        _this = this;
      if (this.options.debug) {
        console.log("Finding player by name: " + name);
      }
      LookupPacket = lolPackets.LookupPacket;
      cmd = new RTMPCommand(0x11, null, null, null, [new LookupPacket(this.options).generate(name)]);
      return this.rtmp.send(cmd, function(err, result) {
        var _ref, _ref1;
        if (err) {
          return cb(err);
        }
        if ((result != null ? (_ref = result.args) != null ? (_ref1 = _ref[0]) != null ? _ref1.body : void 0 : void 0 : void 0) == null) {
          return cb(err, null);
        }
        return cb(err, result.args[0].body);
      });
    };

    LolClient.prototype.getSummonerStats = function(account_id, cb) {
      var PlayerStatsPacket, cmd,
        _this = this;
      if (this.options.debug) {
        console.log("Fetching Summoner Stats for " + account_id);
      }
      PlayerStatsPacket = lolPackets.PlayerStatsPacket;
      cmd = new RTMPCommand(0x11, null, null, null, [new PlayerStatsPacket(this.options).generate(Number(account_id))]);
      return this.rtmp.send(cmd, function(err, result) {
        var _ref, _ref1;
        if (err) {
          return cb(err);
        }
        if ((result != null ? (_ref = result.args) != null ? (_ref1 = _ref[0]) != null ? _ref1.body : void 0 : void 0 : void 0) == null) {
          return cb(err, null);
        }
        return cb(err, result.args[0].body);
      });
    };

    LolClient.prototype.getMatchHistory = function(account_id, cb) {
      var RecentGamesPacket, cmd,
        _this = this;
      if (this.options.debug) {
        console.log("Fetching recent games for " + account_id);
      }
      RecentGamesPacket = lolPackets.RecentGamesPacket;
      cmd = new RTMPCommand(0x11, null, null, null, [new RecentGamesPacket(this.options).generate(Number(account_id))]);
      return this.rtmp.send(cmd, function(err, result) {
        var _ref, _ref1;
        if (err) {
          return cb(err);
        }
        if ((result != null ? (_ref = result.args) != null ? (_ref1 = _ref[0]) != null ? _ref1.body : void 0 : void 0 : void 0) == null) {
          return cb(err, null);
        }
        return cb(err, result.args[0].body);
      });
    };

    LolClient.prototype.getAggregatedStats = function(account_id, cb) {
      var AggregatedStatsPacket, cmd,
        _this = this;
      AggregatedStatsPacket = lolPackets.AggregatedStatsPacket;
      cmd = new RTMPCommand(0x11, null, null, null, [new AggregatedStatsPacket(this.options).generate(Number(account_id))]);
      return this.rtmp.send(cmd, function(err, result) {
        var _ref, _ref1;
        if (err) {
          return cb(err);
        }
        if ((result != null ? (_ref = result.args) != null ? (_ref1 = _ref[0]) != null ? _ref1.body : void 0 : void 0 : void 0) == null) {
          return cb(err, null);
        }
        return cb(err, result.args[0].body);
      });
    };

    LolClient.prototype.getTeamsForSummoner = function(summoner_id, cb) {
      var GetTeamForSummonerPacket, cmd,
        _this = this;
      GetTeamForSummonerPacket = lolPackets.GetTeamForSummonerPacket;
      cmd = new RTMPCommand(0x11, null, null, null, [new GetTeamForSummonerPacket(this.options).generate(Number(summoner_id))]);
      return this.rtmp.send(cmd, function(err, result) {
        var _ref, _ref1;
        if (err) {
          cb(err);
        }
        if ((result != null ? (_ref = result.args) != null ? (_ref1 = _ref[0]) != null ? _ref1.body : void 0 : void 0 : void 0) == null) {
          cb(err, null);
        }
        return cb(err, result.args[0].body);
      });
    };

    LolClient.prototype.getTeamById = function(team_id, cb) {
      var GetTeamByIdPacket, cmd,
        _this = this;
      GetTeamByIdPacket = lolPackets.GetTeamByIdPacket;
      cmd = new RTMPCommand(0x11, null, null, null, [new GetTeamByIdPacket(this.options).generate(team_id)]);
      return this.rtmp.send(cmd, function(err, result) {
        var _ref, _ref1;
        if (err) {
          return cb(err);
        }
        if (!(result != null ? (_ref = result.args) != null ? (_ref1 = _ref[0]) != null ? _ref1.body : void 0 : void 0 : void 0)) {
          return cb(err, null);
        }
        return cb(err, result.args[0].body);
      });
    };

    LolClient.prototype.getSummonerData = function(account_id, cb) {
      var GetSummonerDataPacket, cmd,
        _this = this;
      GetSummonerDataPacket = lolPackets.GetSummonerDataPacket;
      cmd = new RTMPCommand(0x11, null, null, null, [new GetSummonerDataPacket(this.options).generate(account_id)]);
      return this.rtmp.send(cmd, function(err, result) {
        var _ref, _ref1;
        if (err) {
          return cb(err);
        }
        if (!(result != null ? (_ref = result.args) != null ? (_ref1 = _ref[0]) != null ? _ref1.body : void 0 : void 0 : void 0)) {
          return cb(err, null);
        }
        return cb(err, result.args[0].body);
      });
    };

    LolClient.prototype.getSummonerName = function(name, cb) {
      var GetSummonerNamePacket, cmd,
        _this = this;
      if (this.options.debug) {
        console.log("Finding name by summonerId: " + name);
      }
      GetSummonerNamePacket = lolPackets.GetSummonerNamePacket;
      cmd = new RTMPCommand(0x11, null, null, null, [new GetSummonerNamePacket(this.options).generate(name)]);
      return this.rtmp.send(cmd, function(err, result) {
        var _ref, _ref1;
        if (err) {
          return cb(err);
        }
        if ((result != null ? (_ref = result.args) != null ? (_ref1 = _ref[0]) != null ? _ref1.body : void 0 : void 0 : void 0) == null) {
          return cb(err, null);
        }
        return cb(err, result.args[0].body);
      });
    };

    LolClient.prototype.getSpectatorInfo = function(name, cb) {
      var cmd, getSpectatorInfoPacket,
        _this = this;
      if (this.options.debug) {
        console.log("Finding spectator info by summonerId: " + name);
      }
      getSpectatorInfoPacket = lolPackets.GetSpectatorInfoPacket;
      cmd = new RTMPCommand(0x11, null, null, null, [new getSpectatorInfoPacket(this.options).generate(name)]);
      return this.rtmp.send(cmd, function(err, result) {
        var _ref, _ref1, _ref2, _ref3;
        if ((err != null ? (_ref = err.args) != null ? (_ref1 = _ref[0]) != null ? _ref1.error : void 0 : void 0 : void 0) != null) {
          return cb(err.args[0].error);
        }
        if (err) {
          return cb(err);
        }
        if ((result != null ? (_ref2 = result.args) != null ? (_ref3 = _ref2[0]) != null ? _ref3.body : void 0 : void 0 : void 0) == null) {
          return cb(err, null);
        }
        return cb(err, result.args[0].body);
      });
    };

    LolClient.prototype.getMasteryBook = function(summoner_id, cb) {
      var cmd, getMasteryBookPacket,
        _this = this;
      if (this.options.debug) {
        console.log("Finding masteries by summonerId: " + summoner_id);
      }
      getMasteryBookPacket = lolPackets.GetMasteryBookPacket;
      cmd = new RTMPCommand(0x11, null, null, null, [new getMasteryBookPacket(this.options).generate(summoner_id)]);
      return this.rtmp.send(cmd, function(err, result) {
        var _ref, _ref1;
        if (err) {
          return cb(err);
        }
        if ((result != null ? (_ref = result.args) != null ? (_ref1 = _ref[0]) != null ? _ref1.body : void 0 : void 0 : void 0) == null) {
          return cb(err, null);
        }
        return cb(err, result.args[0].body);
      });
    };

    LolClient.prototype.keepAlive = function(cb) {
      var HeartbeatPacket, cmd,
        _this = this;
      if (this.options.debug) {
        console.log("Sending Heartbeat");
      }
      HeartbeatPacket = lolPackets.HeartbeatPacket;
      cmd = new RTMPCommand(0x11, null, null, null, [new HeartbeatPacket(this.options).generate(this.options.account_id, this.keep_alive_counter)]);
      return this.rtmp.send(cmd, function(err, result) {
        var _ref, _ref1;
        _this.keep_alive_counter += 1;
        if (err) {
          return cb(err);
        }
        if ((result != null ? (_ref = result.args) != null ? (_ref1 = _ref[0]) != null ? _ref1.body : void 0 : void 0 : void 0) == null) {
          return cb(err, null);
        }
        return cb(err, result.args[0].body);
      });
    };

    return LolClient;

  })(EventEmitter);

  module.exports = LolClient;

}).call(this);
